* On JavaScript Iteration

** The problem

- Arrays and Objects

- the for loop
- the for...in loop
- the for...of loop

Pros of the class:
- for loops mutate in-place

Cons of the class:
- for loops are not composable
- for loops are not readable
- for loops mutate in-place
- the for loop does not work on objects
- the for...in loop iterates over all iterable properies in the prototype chain
- the for...in loop iterates over the index of the array
- the for...of loop is ... well a for loop, it is unplesant for the eyes

** Iterators

lets make all custom objects iterable

** Generators

lets make it easier

#+BEGIN_SRC javascript
let data = {"1": 1, "2": 2, "3": [4,5,6], "7": {"8": 8}};
let numbers = [];

for(let [k, v] Object.entries(data)) {
    console.log(`key: ${k}, value: ${v}`); 
}

// JS: you can separate the iteration from the logic
Object.entries(data).forEach(([k, v]) => {
    console.log(`key: ${k}, value: ${v}`); 
});

// Java: but what if I want to break free out of the loop?
// JS: yes I guess you're not required to do everithing,
// maybe just some of the work.

Object.entries(data).every(([k, v]) => {
    
});

Object.entries(data).some(([k, v]) => {
    
});

//JS: Oh, and look here you can compose!
Object.entries(data)
.map(([k, v]) => {
    console.log(`key: ${k}, value: ${v}`);
    return v * 4; 
})
.filter(([k, v]) => {
    return v > 10
})
.reduce((acc, [k, v]) => {
    return acc + v;
}, 0);

// Java: Wait man, that thing there is using too much space!
// My C++ collegues are gonna mock me.
// JS: Well ... let me think what we can do about it ... 
// Enter transducers:


// SCRIPTY: new is always better
// iterators

// generators


#+END_SRC
