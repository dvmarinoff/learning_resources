////
// The Foundations: Logic and Proofs
////

The rules of logic specify the meaning of mathematical statements.
To understand mathematics, we must understand what makes up a correct
mathematical argument, that is, a proof.
Once we prove a mathematical statement is true, we call it a theorem.
A collection of theorems on a topic organize what we know about this topic.

In CS proofs are used to establish that computer programs:
  - produce the correct output for all possible input values
  - security of a system
  - artificial intelligence
  - automated reasoning systems allow computers to construct their own proofs



// 1.1 Propositional Logic

- Propositions

A `proposition` is a declarative sentence (that is, a sentence that declares
a fact) that is either true or false, but not both.

ARISTOTLE (384 b.c.e.–322 b.c.e.):
First developed systematically the area of logic that deals with propositions
now called the `propositional calculus` or `propositional logic`.

`Propositional variables`: p, q, r, s

T - True
F - False

GEORGE BOOLE (1815–1864):
in The Laws of Thought (1854) explored methods for producing new propositions
from those that we already have called `compound propositions`.

`negation` - denoted by ¬p (!p), not p

`connectives` - form new proposition from 2 or more existing

    - `conjunction` of p and q, denoted by p ∧ q (p && q)

    - `disjunction` of p and q, denoted by p ∨ q (p || q), p or q.
      p ∨ q is false when both p and q are false and is true otherwise.

      - inclusive or (p ∨ q) OR
      - exclusive or (p ⊕ q) XOR 'Soup or salad comes with an entrée'

- Conditional Statements

Let p and q be propositions. The conditional statement p → q is the proposition
if p, then q. The conditional statement p → q is false when p is true and q is
false, and true otherwise. In the conditional statement p → q, p is called
the hypothesis (or antecedent or premise) and q is called the conclusion
(or consequence)

p → q asserts that q is true on the condition that p holds

p q  p → q
T T    T
T F    F
F T    T
F F    T

Remember that 'q unless ¬p' expresses the same conditional statement as
'if p, then q'.

The if-then construction used in many programming languages is different from
that used in logic.

x = 0
if 2 + 2 = 4 then x = x + 1

- Converse, Contrapositive, and Inverse

from p → q we can form three related statements

    - `converse`: q → p
    - `contrapositive`: ¬q → ¬p
    - `inverse`: ¬p → ¬q

Remember that only contrapositive is equivalent

Note that one of the most common logical errors is to assume that the converse
or the inverse of a conditional statement is equivalent to this conditional
statement

- Bi-conditionals

A way to combine propositions that expresses that two propositions
have the same truth value

Let p and q be propositions. The bi-conditional statement p ↔ q
is the proposition 'p if and only if q'.
The bi-conditional statement p ↔ q is true when p and q have the same truth
values, and is false otherwise.


'p is necessary and sufficient for q'
'if p then q, and conversely'
'p iff q.' (if and only if)

p ↔ q has the truth value of (p → q) ∧ (q → p)

p  q p ↔ q
T  T   T
T  F   F
F  T   F
F  F   T

// 1.2 Applications of Propositional Logic

- System specifications

'The diagnostic message is stored in the buffer or it is retransmitted.'
'The diagnostic message is not stored in the buffer.'
'If the diagnostic message is stored in the buffer, then it is retransmitted.'

s OR r      | s ∨ r
NOT s       | ¬ s
s then r    | s → r

if s false and r true it is consistent

'The diagnostic message is not retransmitted'

NOT r       | ¬ r

now not consistent

- Boolean searches
- Logic Puzzles

RAYMOND SMULLYAN (BORN 1919)
books on recreational logic and mathematics:

Satan, Cantor, and Infinity;
What Is the Name of This Book?;
The Lady or the Tiger?;
Alice in Puzzleland;
To Mock a Mockingbird;
Forever Undecided;
The Riddle of Scheherazade: Amazing Logic Puzzles, Ancient and Modern;

he is considered to be a modern-day Lewis Carroll
interested in self-reference and has worked on extending some of Gödel’s results

- Logic Circuits

Propositional logic can be applied to the design of computer hardware.
This was first observed in 1938 by Claude Shannon.

// 1.3 Propositional Equivalences

An important type of step used in a mathematical argument is the replacement
of a statement with another statement with the same truth value.

`tautology` - a compound proposition that is always true, no matter what
  the truth values of the propositional variables that occur in it

`contradiction` - a compound proposition that is always false

`contingency` - a compound proposition that is neither a tautology nor a
  contradiction

         tautology  contradiction
p   ¬q   p ∨ ¬p     p ∧ ¬p
T    F     T          F
F    T     T          F

- Logical Equivalences

The compound propositions p and q are called logically equivalent if p ↔ q is a
tautology. The notation p ≡ q denotes that p and q are logically equivalent.

Remark: ≡ is not logical connective or compound statement, just expresses that
p ↔ q is a tautology

AUGUSTUS DE MORGAN (1806–1871)
mathematical induction and
De Morgan Laws
¬(p ∧ q) ≡ ¬p ∨ ¬q
¬(p ∨ q) ≡ ¬p ∧ ¬q

they extend to
¬(p 1 ∨ p 2 ∨ · · · ∨ p n ) ≡ (¬p 1 ∧ ¬p 2 ∧ · · · ∧ ¬p n )
and
¬(p 1 ∧ p 2 ∧ · · · ∧ p n ) ≡ (¬p 1 ∨ ¬p 2 ∨ · · · ∨ ¬p n )



Equivalence Name
-------------------------------------------------------
p ∧ T ≡ p
p ∨ F ≡ p                           Identity laws
-------------------------------------------------------
p ∨ T ≡ T
p ∧ F ≡ F                           Domination laws
-------------------------------------------------------
p ∨ p ≡ p
p ∧ p ≡ p                           Idempotent laws
-------------------------------------------------------
¬(¬p) ≡ p                           Double negation law
-------------------------------------------------------
p ∨ q ≡ q ∨ p
p ∧ q ≡ q ∧ p                       Commutative laws
-------------------------------------------------------
(p ∨ q) ∨ r ≡ p ∨ (q ∨ r)
(p ∧ q) ∧ r ≡ p ∧ (q ∧ r)           Associative laws
-------------------------------------------------------
p ∨ (q ∧ r) ≡ (p ∨ q) ∧ (p ∨ r)
p ∧ (q ∨ r) ≡ (p ∧ q) ∨ (p ∧ r)     Distributive laws
-------------------------------------------------------
¬(p ∧ q) ≡ ¬p ∨ ¬q
¬(p ∨ q) ≡ ¬p ∧ ¬q                  De Morgan’s laws
-------------------------------------------------------
p ∨ (p ∧ q) ≡ p
p ∧ (p ∨ q) ≡ p                     Absorption laws
-------------------------------------------------------
p ∨ ¬p ≡ T
p ∧ ¬p ≡ F                          Negation
-------------------------------------------------------



Logical Equivalences Involving Conditional Statements
-------------------------------------------------------
p → q ≡ ¬p ∨ q
p → q ≡ ¬q → ¬p
p ∨ q ≡ ¬p → q
p ∧ q ≡ ¬(p → ¬q)
¬(p → q) ≡ p ∧ ¬q
(p → q) ∧ (p → r) ≡ p → (q ∧ r)
(p → r) ∧ (q → r) ≡ (p ∨ q) → r
(p → q) ∨ (p → r) ≡ p → (q ∨ r)
(p → r) ∨ (q → r) ≡ (p ∧ q) → r



Equivalences Involving Bi-conditional Statements
-------------------------------------------------------
p ↔ q ≡ (p → q) ∧ (q → p)
p ↔ q ≡ ¬p ↔ ¬q
p ↔ q ≡ (p ∧ q) ∨ (¬p ∧ ¬q)
¬(p ↔ q) ≡ p ↔ ¬q



- Propositional Satisfiability

`satisfiable` - a compound proposition is satisfiable if there is an assignment
  of truth values to its variables that makes it true


AUGUSTA ADA, COUNTESS OF LOVELACE (1815–1852)
worked with Charles Babbage on his Analytic Engine
the 'engine is the material expression of any indefinite function of any degree
of generality and complexity'

- Applications of Satisfiability

Many problems, in:
robotics, software testing, computer-aided design, machine vision,
integrated circuit design, computer networking, and genetics,
can be modeled in terms of propositional satisfiability



// 1.4 Predicates and Quantifiers



// 1.5 Nested Quantifiers



// 1.6 Rules of Inference



// 1.7 Introduction to Proofs



// 1.8 Proof Methods and Strategy
