////
// The Foundations: Logic and Proofs
////

The rules of logic specify the meaning of mathematical statements.
To understand mathematics, we must understand what makes up a correct
mathematical argument, that is, a proof.
Once we prove a mathematical statement is true, we call it a theorem.
A collection of theorems on a topic organize what we know about this topic.

In CS proofs are used to establish that computer programs:
  - produce the correct output for all possible input values
  - security of a system
  - artificial intelligence
  - automated reasoning systems allow computers to construct their own proofs



// 1.1 Propositional Logic

- Propositions

A `proposition` is a declarative sentence (that is, a sentence that declares
a fact) that is either true or false, but not both.

ARISTOTLE (384 b.c.e.–322 b.c.e.):
First developed systematically the area of logic that deals with propositions
now called the `propositional calculus` or `propositional logic`.

`Propositional variables`: p, q, r, s

T - True
F - False

GEORGE BOOLE (1815–1864):
in The Laws of Thought (1854) explored methods for producing new propositions
from those that we already have called `compound propositions`.

`negation` - denoted by ¬p (!p), not p

`connectives` - form new proposition from 2 or more existing

    - `conjunction` of p and q, denoted by p ∧ q (p && q)

    - `disjunction` of p and q, denoted by p ∨ q (p || q), p or q.
      p ∨ q is false when both p and q are false and is true otherwise.

      - inclusive or (p ∨ q) OR
      - exclusive or (p ⊕ q) XOR 'Soup or salad comes with an entrée'

- Conditional Statements

Let p and q be propositions. The conditional statement p → q is the proposition
if p, then q. The conditional statement p → q is false when p is true and q is
false, and true otherwise. In the conditional statement p → q, p is called
the hypothesis (or antecedent or premise) and q is called the conclusion
(or consequence)

p → q asserts that q is true on the condition that p holds

p q  p → q
T T    T
T F    F
F T    T
F F    T

Remember that 'q unless ¬p' expresses the same conditional statement as
'if p, then q'.

The if-then construction used in many programming languages is different from
that used in logic.

x = 0
if 2 + 2 = 4 then x = x + 1

- Converse, Contrapositive, and Inverse

from p → q we can form three related statements

    - `converse`: q → p
    - `contrapositive`: ¬q → ¬p
    - `inverse`: ¬p → ¬q

Remember that only contrapositive is equivalent

Note that one of the most common logical errors is to assume that the converse
or the inverse of a conditional statement is equivalent to this conditional
statement

- Bi-conditionals

A way to combine propositions that expresses that two propositions
have the same truth value

Let p and q be propositions. The bi-conditional statement p ↔ q
is the proposition 'p if and only if q'.
The bi-conditional statement p ↔ q is true when p and q have the same truth
values, and is false otherwise.


'p is necessary and sufficient for q'
'if p then q, and conversely'
'p iff q.' (if and only if)

p ↔ q has the truth value of (p → q) ∧ (q → p)

p  q p ↔ q
T  T   T
T  F   F
F  T   F
F  F   T

// 1.2 Applications of Propositional Logic

- System specifications

'The diagnostic message is stored in the buffer or it is retransmitted.'
'The diagnostic message is not stored in the buffer.'
'If the diagnostic message is stored in the buffer, then it is retransmitted.'

s OR r      | s ∨ r
NOT s       | ¬ s
s then r    | s → r

if s false and r true it is consistent

'The diagnostic message is not retransmitted'

NOT r       | ¬ r

now not consistent

- Boolean searches
- Logic Puzzles

RAYMOND SMULLYAN (BORN 1919)
books on recreational logic and mathematics:

Satan, Cantor, and Infinity;
What Is the Name of This Book?;
The Lady or the Tiger?;
Alice in Puzzleland;
To Mock a Mockingbird;
Forever Undecided;
The Riddle of Scheherazade: Amazing Logic Puzzles, Ancient and Modern;

he is considered to be a modern-day Lewis Carroll
interested in self-reference and has worked on extending some of Gödel’s results

- Logic Circuits

Propositional logic can be applied to the design of computer hardware.
This was first observed in 1938 by Claude Shannon.

// 1.3 Propositional Equivalences

An important type of step used in a mathematical argument is the replacement
of a statement with another statement with the same truth value.

`tautology` - a compound proposition that is always true, no matter what
  the truth values of the propositional variables that occur in it

`contradiction` - a compound proposition that is always false

`contingency` - a compound proposition that is neither a tautology nor a
  contradiction

         tautology  contradiction
p   ¬q   p ∨ ¬p     p ∧ ¬p
T    F     T          F
F    T     T          F

- Logical Equivalences

The compound propositions p and q are called logically equivalent if p ↔ q is a
tautology. The notation p ≡ q denotes that p and q are logically equivalent.

Remark: ≡ is not logical connective or compound statement, just expresses that
p ↔ q is a tautology

AUGUSTUS DE MORGAN (1806–1871)
mathematical induction and
De Morgan Laws
¬(p ∧ q) ≡ ¬p ∨ ¬q
¬(p ∨ q) ≡ ¬p ∧ ¬q

they extend to
¬(p 1 ∨ p 2 ∨ · · · ∨ p n ) ≡ (¬p 1 ∧ ¬p 2 ∧ · · · ∧ ¬p n )
and
¬(p 1 ∧ p 2 ∧ · · · ∧ p n ) ≡ (¬p 1 ∨ ¬p 2 ∨ · · · ∨ ¬p n )



Equivalence Name
-------------------------------------------------------
p ∧ T ≡ p
p ∨ F ≡ p                           Identity laws
-------------------------------------------------------
p ∨ T ≡ T
p ∧ F ≡ F                           Domination laws
-------------------------------------------------------
p ∨ p ≡ p
p ∧ p ≡ p                           Idempotent laws
-------------------------------------------------------
¬(¬p) ≡ p                           Double negation law
-------------------------------------------------------
p ∨ q ≡ q ∨ p
p ∧ q ≡ q ∧ p                       Commutative laws
-------------------------------------------------------
(p ∨ q) ∨ r ≡ p ∨ (q ∨ r)
(p ∧ q) ∧ r ≡ p ∧ (q ∧ r)           Associative laws
-------------------------------------------------------
p ∨ (q ∧ r) ≡ (p ∨ q) ∧ (p ∨ r)
p ∧ (q ∨ r) ≡ (p ∧ q) ∨ (p ∧ r)     Distributive laws
-------------------------------------------------------
¬(p ∧ q) ≡ ¬p ∨ ¬q
¬(p ∨ q) ≡ ¬p ∧ ¬q                  De Morgan’s laws
-------------------------------------------------------
p ∨ (p ∧ q) ≡ p
p ∧ (p ∨ q) ≡ p                     Absorption laws
-------------------------------------------------------
p ∨ ¬p ≡ T
p ∧ ¬p ≡ F                          Negation
-------------------------------------------------------



Logical Equivalences Involving Conditional Statements
-------------------------------------------------------
p → q ≡ ¬p ∨ q
p → q ≡ ¬q → ¬p
p ∨ q ≡ ¬p → q
p ∧ q ≡ ¬(p → ¬q)
¬(p → q) ≡ p ∧ ¬q
(p → q) ∧ (p → r) ≡ p → (q ∧ r)
(p → r) ∧ (q → r) ≡ (p ∨ q) → r
(p → q) ∨ (p → r) ≡ p → (q ∨ r)
(p → r) ∨ (q → r) ≡ (p ∧ q) → r



Equivalences Involving Bi-conditional Statements
-------------------------------------------------------
p ↔ q ≡ (p → q) ∧ (q → p)
p ↔ q ≡ ¬p ↔ ¬q
p ↔ q ≡ (p ∧ q) ∨ (¬p ∧ ¬q)
¬(p ↔ q) ≡ p ↔ ¬q



- Propositional Satisfiability

`satisfiable` - a compound proposition is satisfiable if there is an assignment
  of truth values to its variables that makes it true


AUGUSTA ADA, COUNTESS OF LOVELACE (1815–1852)
worked with Charles Babbage on his Analytic Engine
the 'engine is the material expression of any indefinite function of any degree
of generality and complexity'

- Applications of Satisfiability

Many problems, in:
robotics, software testing, computer-aided design, machine vision,
integrated circuit design, computer networking, and genetics,
can be modeled in terms of propositional satisfiability

HENRY MAURICE SHEFFER (1883–1964)
introduced what is now known as the Sheffer stroke. Used in Whitehead and
Russell’s Principia Mathematica

// 1.4 Predicates and Quantifiers

Propositional logic cannot adequately express the meaning of all statements in
mathematics and in natural language:

'Every computer connected to the university network is functioning properly.'

Predicate logic can be used to express the meaning of a wide range of statements
in mathematics and computer science in ways that permit us to reason and explore
relationships between objects.

- Predicates

    statements involving variables:

    x > 3,
    x = y + 3,
    x + y = z,
    'computer x is under attack by an intruder'

    We can denote the statement 'x is greater than 3' by P (x)
    The statement P (x) is also said to be the value of the propositional
    function P at x
    Once a value has been assigned to the variable x, the statement P (x)
    becomes a proposition and has a truth value

CHARLES SANDERS PEIRCE (1839–1914)
He made important contributions to an amazing number of disciplines.
He is noted as the preeminent system-building philosopher competent and
productive in logic, mathematics, and a wide range of sciences.

- Preconditions and Postconditions

`preconditions` - the statements that describe valid input
`postconditions` - conditions that the output should satisfy when the program
  has run

- Quantifiers

express the extent to which a predicate is true over a range of elements

all, some, many, none, and few

studied by predicate calculus

- The Universal Quantifier

The universal quantification of P (x) is the statement:

'P (x) for all values of x in the domain.'

The notation ∀xP (x) denotes the universal quantification of P (x).
We read ∀xP (x) as 'for all xP (x)' or 'for every xP (x).'
An element for which P (x) is false is called a counterexample of ∀xP (x).

- The Existential Quantifier

'There exists an element x in the domain such that P (x).'
We use the notation ∃xP (x)

- The Uniqueness Quantifier

The notation ∃!xP (x) [or ∃ 1 xP (x)] states:
  'There exists a unique x such that P (x) is true.'

- Logical Equivalences Involving Quantifiers

∀x(P (x) ∧ Q(x)) ≡ ∀xP (x) ∧ ∀xQ(x)

we can distribute a universal quantifier over a conjunction
we can also distribute an existential quantifier over a disjunction

However, we cannot distribute a universal quantifier over a disjunction, nor can
we distribute an existential quantifier over a conjunction

∀x(P (x) ∧ Q(x)) ≡ ∀xP (x) ∧ ∀xQ(x)

¬∀xP (x) ≡ ∃x ¬P (x)

The rules for negations for quantifiers are called:

De Morgan’s Laws for Quantifiers
-----------------------------------
Negation   Equivalent Statement   When Is Negation True?         When False?
¬∃xP (x)   ∀x¬P (x)               For every x, P (x) is false    There is an x for which
¬∀xP (x)   ∃x¬P (x)               There is an x for which        P (x) is true.
                                  P (x) is false                 P (x) is true for every x

CHARLES LUTWIDGE DODGSON (1832–1898)
His writings published under this real name include articles and books on
geometry, determinants, and the mathematics of tournaments and elections.
(He also used the pseudonym Lewis Carroll for his many works on
recreational logic)

// 1.5 Nested Quantifiers

∀x∀y(x + y = y + x)
∀x∃y(x + y = 0)
∀x∀y∀z(x + (y + z) = (x + y) + z)

In working with quantifications of more than one variable, it is sometimes
helpful to think in terms of nested loops

Quantifications of Two Variables
-----------------------------------
Statement      When True?                             When False?
∀x∀yP (x, y)   P (x, y) is true for every pair x, y   There is a pair x, y for
∀y∀xP (x, y)                                          which P (x, y) is false

∀x∃yP (x, y)   For every x there is a y for           There is an x such that
               which P (x, y) is true                 P (x, y) is false for every y

∃x∀yP (x, y)   There is an x for which P (x, y)       For every x there is a y for
               is true for every y                    which P (x, y) is false

∃x∃yP (x, y)   There is a pair x, y for which         P (x, y) is false for every
∃y∃xP (x, y)   P (x, y) is true                       pair x, y


A statement is in prenex normal form (PNF) if and only if it is of the form:

Q 1 x 1 Q 2 x 2 · · · Q k x k P (x 1 , x 2 , . . . , x k )

where each Q i , i = 1, 2, . . . , k, is either the existential quantifier or
the universal quantifier, and P (x 1 , . . . , x k ) is a predicate
involving no quantifiers

For example:

∃x∀y(P (x, y) ∧ Q(y))

is in prenex normal form, whereas:

∃xP (x) ∨ ∀xQ(x)

is not (because the quantifiers do not all occur first)

// 1.6 Rules of Inference

An argument in propositional logic is a sequence of propositions. All but the
final proposition in the argument are called premises and the final proposition
is called the conclusion.
An argument is valid if the truth of all its premises implies that the
conclusion is true.
An argument form in propositional logic is a sequence of compound propositions
involving propositional variables.
An argument form is valid no matter which particular propositions are
substituted for the propositional variables in its premises, the conclusion
is true if the premises are all true.


- Modus ponens (Latin for mode that affirms)

The tautology (p ∧ (p → q)) → q is the basis of the rule of inference called
modus ponens, or the law of detachment

- the symbol ∴ denotes “therefore”

  p
  p → q
  -----
∴ q

Rules of Inference
----------------------
Rule of Inference   Tautology                         Name
  p                 (p ∧ (p → q)) → q                 Modus ponens
  p → q
  -----
∴ q

  ¬q                (¬q ∧ (p → q)) → ¬p               Modus tollens
  p → q
  ----
∴ ¬p

  p → q             ((p → q) ∧ (q → r)) → (p → r)     Hypothetical syllogism
  q → r
  -----
∴ p → r

  p ∨ q             ((p ∨ q) ∧ ¬p) → q                Disjunctive syllogism
  ¬p
  ----
∴ q

  p                 p → (p ∨ q)                       Addition
  -----
∴ p ∨ q

  p ∧ q             p ∧ q) → p                        Simplification
  ----
∴ p

  p                 ((p) ∧ (q)) → (p ∧ q)             Conjunction
  q
  -----
∴ p ∧ q

  p ∨ q             ((p ∨ q) ∧ (¬p ∨ r)) → (q ∨ r)    Resolution
  ¬p ∨ r
  -----
∴ q ∨ r


- Resolution

Computer programs have been developed to automate the task of reasoning and
proving theorems. Many of these programs make use of a rule of inference known
as resolution. This rule of inference is based on the tautology:

((p ∨ q) ∧ (¬p ∨ r)) → (q ∨ r)

- Fallacies

  fallacy of affirming the conclusion:

  ((p → q) ∧ q) → p

  is not a tautology. However, there are many incorrect arguments that treat
  this as a tautology

  fallacy of denying the hypothesis:

  ((p → q) ∧ ¬p) → ¬q

Rules of Inference for Quantified Statements
------------------------------------------------
Rule of Inference             Name

  ∀xP (x)                     Universal instantiation
  -------
∴ P (c)

  P (c) for an arbitrary c    Universal generalization
  ------------------------
∴ ∀xP (x)

  ∃xP (x)                     Existential instantiation
  ------------------------
∴ P (c) for some element c

  P (c) for some element c    Existential generalization
  ------------------------
∴ ∃xP (x)




// 1.7 Introduction to Proofs



// 1.8 Proof Methods and Strategy
