////
// Contents
////

1. Trigonometry
2. Functions
3. Vectors
4. Logarithms
5. Probability
6. Combinations and Permutations
7. Discrete Mathematics
8. Computability Theory
9. Calculus

////
// Trigonometry
////

1. wikipedia:
    - from greek trigonon (triangle) and metron measure
    - a branch of math that studies relationships involving lengths and angles
     of triangles
    - emerged in the Hellenistic world during 3rd c. B.C. from applications of
     geometry to astonomical studies
    - if at least the length of one side and the value of one angle is known all
     can be determined
    - since any non-right-angle-triangle(on a flat plane) can be bisected to
     create two right-angle triangles, most problems can be reduced to
     calculations on right-angle triangles. One exception is spherical trigonometry

    Sine = Opposite / Hypotenuse     - SOH
    Cosine = Adjecent / Hypotenuse   - CAH
    Tangent = Opposite / Adjecent    - TOA

    Some Old Hippie Caught Another Hippie Trippin' On Acid

////
// Functions
////
- wikipedia: in math, a function is a relation between a set of inputs and a set
 of permissible outputs with the property that each input is related to exactly
 one output

- mathsisfun: a function relates each element of a set with exactly one element
  of another set

  - "...each element..." - means that every element in X is related to some
   element in Y. We say that the function covers X (relates every element of it).
   (But some elements of Y might not be related to at all, which is fine.)

  - "...exactly one..." - one-to-many is not ok, but many-to-one is ok

  - vertical line test - on a graph, the idea of single valued means that
   no vertical line ever crosses more than one value

  - domain, codomain and range
    - the set "X" is called the Domain,
    - the set "Y" is called the Codomain, and
    - the set of elements that get pointed to in Y (the actual values produced
     by the function) is called the Range

  - ordered pairs
    - another way to think about functions
    (4.16)
    (input, output)
    (x, f(x))

    - set of ordered pairs
    {(2,4), (3,5), (7,3)}
      - a benefit of ordered pairs is that we can graph them as coordinates


input x --> [ function f ] --> output f(x)

input | relationship | output
   3  |     x * x    |    9
   4  |     x * x    |   16
   5  |     x * x    |   25

   - functions process sets of things
    - set of even numbers { -4, -2, 0, 2, 4 }
    - set of clothes      { 'hat', 'shirt' }
   - each individual thing is called a member (or element)
   - function takes elements of a set and returns elements of a set

- Set-Builder Notation

  { x | x > 0 }
  { x : x > 0 }

  - it says "the set of all x's, such that x is greater than 0"

  { x E R | x > 3 }

  [3, infinity]

  - E - means a member of
  - R - stands for real numbers

- Interval Notation

  [0, 20]
  - include 0 and 20
  (0, 20)
  - not 0 and 20

////
// Vectors
////
  - a vector has magnitude (size) and direction
  - the length of the line shows its magnitude and the arrowhead points
   in the direction

      magnitude
  --- ---------> --- direction
    tail     head

        -->
    a = AB

  - velocity, acceleration, force and many other things are vectors
  - subtracting
    - first we reverse the direction of the vector we want to subtract,
    - then add them as usual

  - calculations
    - most common way is to first break up vectors into x and y parts

       x  y
  a = (8.13)
  b = (26.7)

  c = a + b
  ax + bx = 8 + 26 = 34
  ay + by = 13 + 7 = 20

  c = (34.20)

  - magnitude
  |a| or ||a||

  |a| = cqrt(x*x + y*y)

  - scalar
   - a scalar has magnitude (size) only
   - when we multiply a vector by a scalar it is called "scaling" a vector,
    because we change how big or small the vector is

////
// Logarithms
////
  - How many of one number do we multiply to get another number?

  x * x = log x y

- Partial Sums

  4 SIGMA n=1 n



////
// Discrete Mathematics
////

// Logic and proof



////
// Probability
////


////
// Combinations and Permutations
////

Combination - when order doesn't matter
Permutation - ordered Combination

- Permutations

  - Permutations with repetition
   When a thing has n different things we have n choices each time

  For example: choosing 2 of those things, the permutations are:

  n * n * n

  More generally: choosing r of something that has n different types,
  the permutations are:

  n * n * ... (r times) = n ^ r

  - Permutations without repetition
  In this case, we have to reduce the number of available choices
  each time:

  16 * 15 * 14 * 13 * ... = 20922789888000

  or if we need only 3:

  16 * 15 * 14 = 3360

////
// Computability
////
- Georg Cantor
    - counting sets by mapping them to each other
    - bijection - exact matching by mapping

    - diagonalization method

    0    1
    |----|

    0    2    3
    |----|----|

    - there is infinite numbers between 0 and 1
    - N < (1 , 0)
    - Continuum problem - is there N < x < (0 , 1)
                        - is unsolvable

- David Hilbert
    - Entscheidungsproblem

    Is there an Algorithm that given a statement in formal logic will determine
    if that statement is true or false?

    - he was depending on logic to be complete meaning:
    every provable statement is true and every true statement is provable

- Kurt Godel
    A math systems should be:
        - sufficiently expressive
        - completeness - ability to prove every true statement

        axioms -> theorems -> proofs

        principal of explosion
        - "bigs can fly" || "unicorns exist"
        - "unicorns don't exist" || "unicorns exist"

        - inconsistent system can prove anything


    - first incompleteness theorem
        - any sufficiently expressive math system must be either incomplete or
         inconsistent

         - if add incomplete statements as axiom a new system is created

    - second incompleteness theorem
        - a consistent math system cant prove its own consistency


    - after Alonzo Church solution:
        - General recursive functions

- Alonzo Church
    - lambda calculus - a macro language for logic

    L,M,N ::= x
            | (lambda x.N)
            | (L M)

    - The Halting Problem
        - 'how to catch an infinite loop?'

        Program   ->   Decider      <-   Input
                       Algorithm

                          |
                     Halts or not

    - undecidable problem
    - Proof by contradiction used
    - with Cantors' diagonalization

- Alan Turing

    - Turing machines

        - if turing machine is the definition of algorithm then the
         Entschaidungsproblem is undecidable

    - the three definitions turned out to be equivalent



- Gerhard Gentzen
    - Natural Deduction

- Curry - Howard correspondence

               propositions as types
                     proofs as programs
    normalisation of proofs as evaluation of programs


                     Natural Deduction <--> Typed Lambda Calculus
                     Gentzen (1935)         Church (1940)

                          Type Schemes <--> ML Type System
                          Hindley (1969)    Milner (1975)

                              System F <--> Polymorphic Lambda Calculus
                              Girard (1972) Reynolds (1974)

                           Modal Logic <--> Monads(state, exceptions)
                           Lewis (1910)     Kleisli (1965) Moggi (1987)

    Classical-Intuitionistic Embedding <--> Continuation Passing Style
    Godel (1933)                            Reynolds (1972)

                                     ? <--> Concurrency and Distribution

    - and there is a third column that corresponds to category theory



////
// Calculus
////
1. Intro

  - Sam and Alex are travelling in the car ... but the speedometer is broken.
   ...
   "No, Sam! Not our average for the last minute, or even the last second,
   I want to know our speed RIGHT NOW."

   Think about it ... how do we figure out a speed at an exact instant in time?
   What is the distance? What is the time difference?
   They are both zero, giving us nothing to calculate with!

   But Sam has an idea ... invent a time so short it won't matter.

    delta t

   So Sam works out the difference in distance between t and (t + delta t)


  - The word Calculus comes from Latin meaning "small stone". Because it is like
   understanding something by looking at small pieces

   - Differential Calculus cuts something into small pieces to find how it changes

   - Integral Calculus joins (integrates) the small pieces together to find how
    much there is

   - and Differential Calculus and Integral Calculus are like inverses of each
    other, just like multiplication and division are inverses

////
// Church encoding
////

λv.e
  - stands for the function that maps the input v to the output e

Y(F) = F(Y(F))

function Y(F) { return F(Y(F)) ; }

Y(F) = F(λ x.(Y(F))(x))

function Y(F) { return F(function (x) { return (Y(F))(x) ; } ) ; }
