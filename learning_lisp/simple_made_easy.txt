Summary:

Rich Hickey emphasizes simplicity’s virtues over easiness’,
showing that while many choose easiness they may end up with
complexity, and the better way is to choose easiness along
the simplicity path.

1) Simplicity is prerequisite for reliability
2) Simple(the opposite of complex) is often mistaken for Easy(to be at hand)
3) What matter in softwere is:
    - does it do what it is supposed to do?
    - can we rely on it?
    - can problems be fixed along way?
    - can requirements change?
   What does not is:
    - look and feel
    - experience writing code
    - cultural implications
4) The benefits of simplicity are:
    - ease of understanding
    - ease of change
    - ease of debugging
    - flexibility
5) Complex constructs are:
    - State, Object, Methods, Syntax, Inheritance,
      Switch/matching, Vars, Imperative loops,
      Actors, ORM, Conditionals
6) Simple constructs are:
    - Values Functions, Namespaces, Data, Polymorphism,
      Managed refs, Set functions, Queues,
      Declarative data manipulation, Rules, Consistency
7) Buld simple systems by:
    - Abstracting - design by answering the questions related to:
      what, who, when, where, why and how
    - Choosing constructs that generate simple artifacts
    - Simplify by encapsulation


Presentation:

Appeal to authority:

"Simplicity is prerequisite for reliability" - Edsger W. Dijkstra



Word Origins:

 Simple             Easy
 --------------     ----------------------
 sim-plex           easy < aise < adjacens 
 one fold/braid     lie near 
 vs complex         vs hard

 One fold/braid     But not
 --------------     -------------  
 one role           one instance
 one task           one operation
 one concept        
 one dimension       

 About lack of interleving, not cardinality
 Objective


 Easy
 ----------------------------------------------
 Near, at hand
  - on our hard drive, in our tool set, IDE,
   apt get, gem install
 
 Near to our understanding/skill set, familliar
 Near our capabilities
 Easy is relative

 I can't read German, does that mean that German is unreadable?
 The whole thing degrades, and we can never had un objective
 discussion about the quolities that matter to us in our
 software.



Construct vs Artifact

We focus on experience of use of construct
    - programmer convenience
    - programmer replacebility
Rather than the long term results of use
    - software quality, correctness
    - maintenance, change
We must assess constructs by their artifacts

Constructs - languages, libraries, ...
But we don't ship sourse code, and the user don't look at it,
they run it for long time, and it is product of the Artifact
not the Construct.
We focus too much on our experience with the Construct -
I have to type less! ...
Managers too focus on ease of replacment.

Does the software do what it is supposed to do?
Is it of high quolity?
Can we rely on it?
Can we fix problems?
Can we change it with new requirements?

These things have very little to do with the Construct as we
typed it in, and alot with the attributes of the Artifact.
We have to start assessing our Constructs based around the Artfacts.



Limits

We can only hope to make reliable those things we can understand
We can only consider a few things at a time
Iterwined things must be considered together
Complexity undermines understanding

As you make things more flexible and extensible and dynamic,
they become harder to understand.
Understanding is very limited.

How many things you can keep in your hands/mind ...
The avarage jugler can handle 3 balls
The best 9, 12 balls. Thye can't do 30, 100.
How many extra ball do you want o jugle?
Think when you add a new tool.

When things are intertwined together we lose the ability to
think for them in isolation.



Change

Changes to software require analysis and decisions
What will be impacted?
Where do changes need to be made?
Your ability to reason about your program is critical to
changing it without fear. Not proof, just informal reasoning


According to Agile and Extream programming apperantly
refactoring and tests allow us to change our software with
zero impact?!



Debugging

What's true of every bug in the field?
It has passed the type checker, and all tests
Your ability to reason about your program is critical
to debugging.


The world of guard-rail programming:
I have tests, I can make a change.
Who drives their car around bangging against the guard rails?
Do the guard rails help you reach your goal, guide you places?
They don't point your car in particular direction.



Development Speed

Emphasizing ease gives early speed
Ignoring complexity will slow you down over the long haul
On throwaway or trivial projects, nothing much matters


What kind of runner can run as fast as they can from the
start of the race?
Only someone who runs only very short races.
But programmers pretend to know how to fix this problem.
We just fire the starting pistol every 100 yards and call
it a new sprint.
At the end you're not moving at all.



Easy Yet Complex?

Many complicating constructs are
    - succinctly described
    - familiar
    - available
    - easy to use
What matters is the complexity they yield
    - any such complexity is incidental


It comes from the tool you choose
The knitted castle problem



Benefits os Simplicity

Ease understanding
Ease of change
Easier debugging
Flexibility
    - policy
    - location etc


Is having a test suite and refactoring tools going to change
the knitted castle faster then changing a lego castle?



Making things easy

Bring to hand by installing
    - getting approved to use
Become familiar by learnig, trying
But mental capability?
    - not going to move very far
    - make things near by simplifying them



Parens are Hard!

Not at hand for most
Not familiar
But are they simple?
Not in CL?Scheme
    - overloadded for calls and grouping
    - for those bothered trying, this is a valid
     complexity complaint
Adding a data structure for grouping, e.g. vector,
makes each simpler, minimal effort can then make easy too


Maybe they don't have the tool for paren balancing.
Adding more data structures does not make lisp not lisp.
It is still a language difined in its own data structures.
It is made more simple.



LISP programmers know the value of everything and the cost of nothing.
- Alan Perils

lisp progrsmmers used to be pigs to memmory

On hacker news there are to many new tools/things that have benefits,
but no costs mentioned.



What is your toolkit?
--------------------------------------------------------------
Compexity                        Simplicity
==============================================================
State, Objects                   Values
--------------------------------------------------------------
Methods                          Functions, Namespaces
--------------------------------------------------------------
vars                             Managed refs
--------------------------------------------------------------
Inheritance, switch, matching    Polymorphism a la carte
--------------------------------------------------------------
Syntax                           Data
--------------------------------------------------------------
Imperative loops, fold           Set functions
--------------------------------------------------------------
Actors                           Queues
--------------------------------------------------------------
ORM                              Declarative data manipulation
--------------------------------------------------------------
Conditionals                     Rules
--------------------------------------------------------------
Inconsistancy                    Consistancy
--------------------------------------------------------------


Complect

To interleave, entwine, braid
    - archaic
Don't do it!
    - Complecting things is the source of complexity
Best avoid in the first place



Compose

To plase together
Composing simple components is the key to robust software



Modularity and Simplicity

They may not call each other, but they think of each other
and are totally complected. It has nothing to do with the fact
that there are two things, it has to do with what these things
are allowed to think about (it must be only some abstructions)

Partitiong and stratification don't imply simplicity,
but are enabled by this
Don't be fooled by code organization



State is never simple

Complects value and time
It is easy, in the at-hand and familiar senses
Interweaves everything that touched it, directly or indirectly
Not mitigated by modules, encapsulation
Note - this has nothing to do with asynchrony



Not all refs/vars are Equal

None make state simple
All warn of state, help reduce it
Clojure and Haskell refs compose value and time
    - allow you to extract a simple value
    - provide abstraction of time
Does your var do that?



The Complexity Toolkit

Constract                  Complects
=========================================================
State                      Eveything that touchees it
---------------------------------------------------------
Objects                    State, identity, value
---------------------------------------------------------
Methods                    Function and state, namespaces
---------------------------------------------------------
Syntax                     Meaning, order 
---------------------------------------------------------
Inheritance                Types
---------------------------------------------------------
Switch/matching            Multiple who/what pairs
---------------------------------------------------------
var(iable)s                Value, time
---------------------------------------------------------
Imperative loops, fold     what/how
---------------------------------------------------------
Actors                     what/who
---------------------------------------------------------
ORM                        OMG
---------------------------------------------------------
Conditionals               Why, rest of program
---------------------------------------------------------



The Simplicity Toolkit

Construct                        Get it via... 
==================================================================
Values                           final, persistent collections 
------------------------------------------------------------------
Functions                        a.k.a. stateless methods
------------------------------------------------------------------
Namespaces                       language support
------------------------------------------------------------------
Data                             Maps, arrays, sets, XML, JSON etc
------------------------------------------------------------------
Polymorphism a la carte          Protocols, type classes  
------------------------------------------------------------------
Managed refs                     Clojure/Haskell refs
------------------------------------------------------------------
Set functions                    Libraries
------------------------------------------------------------------
Queues                           Libraries
------------------------------------------------------------------
Declarative data manipulation    SQL/LINQ/Datalog
------------------------------------------------------------------
Rules                            Libraries, Prolog
------------------------------------------------------------------
Consistency                      Transactions, values
------------------------------------------------------------------

Data is simple, not much variation in the essential
nature of data. There are maps, sets, linear sequantial
things, ... The 100s of 1000s of variations we create
have nothing to do with the essence of the stuff and
makes it hard to write programs that manupulate the
essenese of the stuff

Clojure Protocols and haskell types gives you the ability
to say: I have data structures, I have definitions of sets
of functions, and I can connect them together, and those
aer three independant operations. And there is
genaralization, that is not tied to anything particular

Declarativ rules systems instead of embeding a bunch of
conditianals in our language at every point of decision.
It is nice to gether this stuff and put it somewhere else



Environmental Complexity

Resources, e.g. memory, CPU
Inherent complexity in implementation space
    - all components contend for them
You can use Segmentation
    - but it is waste of cpu and memory
Individual policies don't compose
    - just make things mpre complex


Really hard to deal with souce of comlexity



Programming, when stripped of all its circumstantial
irrevancies, boils down to no more and no less than
very effective thinking so as to avoid unmastered
complexity, to very vigorous separation of your many
different concerns.
- Edgar W. Dijkstra

or programing id not about typing it is about thinking



Abstraction for Simplicity

Abstract - drawn away from the phisical nature
vs Abstruction as comlexity hiding
Who, What, When, Where, Why and How
I don't know, I don't want to know

Choose Constructs that have simple artefacts, or build such



;; TODO: go over this part again
What

Operations
Form abstructions from related sets of functions
    - small sets
Represent with polymorphism constructs
Specify inputs, outputs, semantics
    - Use only values and other abstructions
Don't complect with
    - How



Who

Entities implementing abstructions
Build from subcomponents direct-injection style
    - pusue many subcomponents
        - e.g. policy
Don't complect with
    - component details
    - other entities



How

implementing logic
Connect to abstructions and etities via polymorphism constructs
Prefer abstraction that don't dictate how
    - declarative tools
Don't complect with
    - anything

More declarative is better
All those implementaions should be islands



When, Where

Strenuously avoid complecting these with anything in the design
Can seep in via directly connected objects
    - use queues


This thing deals with the input and this thing has to do the
next part of the job. If thing A calls thing B you just
comlected it.

Use queues to get rid of this problem



Why

The policy and rules of the application
Often strewn everywhere
    - in conditions
    - complected with control flow etc
Explore rules and declarative logic systems



Information is Simple

Don't ruin it
By hiding it behind a macro-language
    - i.e. a class with information-specific methods
    - thwarts generic data composition
    - ties logic to representaion du jour
Represent data as data


Objects are made to encapsulate IO devices. There is a screen,
but I can't touch it (object), there is a mouse(object).
That is all they are good for. They where never supposed to be
applied to information. Its is complex. It ruins the ability
to build generic data manipulation. If you leave Data alone
you can build things once that manupulate Data and reuse them
all over the place.
Use maps and sets directly, don't write a class.



Simplifying

Identify individual threads/roles/dimentions
Following through the user story/code
Disentangling



Simplicity is a Choice

Your 'reliability' tools (testing, refactoring, type systems)
don't care, and are quite peripheral to producing good software
They are safety nets, but don't catch the problem.

Simplicity requires constant vigilance, sensibilities and care.
You wanna start seiing complecting. Start seeing interconnection
between things that could have been idependant.
Thats where you gonna get the most power.

Choose simple constructs
Simplify the problem space before you start
Simplicity oftten means making more things, not fewer
Making them separate, gives you much more ability to change them 
Which is where benefits lie.

Simplicity is the ultimate sophistication.
- Leonardo da Vinci



